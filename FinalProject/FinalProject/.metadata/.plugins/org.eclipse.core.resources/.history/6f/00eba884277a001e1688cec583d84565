package com.java.jsp;

import java.security.SecureRandom;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

public class ProviderDaoImpl implements ProviderDao {
	
	SessionFactory sf;
	Session session;

	public String generateproviderId() {
		sf = SessionHelper.getConnection();
		session = sf.openSession();
		Criteria cr = session.createCriteria(Provider.class);
		
		return null;
	}
	
	@Override
	public String addProvider(Provider provider) {
		String providerid = generateproviderId();
		System.out.println("Provider Id " +providerid);
	     provider.setProviderid(providerid);
	     sf = SessionHelper.getConnection();
	     session = sf.openSession();
	     Criteria cr = session.createCriteria(Provider.class);
	     Transaction trans = session.beginTransaction();
	     
	  
	       
	        // Save the Provider entity
	        session.save(provider);
	        trans.commit();
	        session.close();

	        String otp = generateOtp(8); 

	        String body = "Welcome to Mr/Miss " + provider.getFirstName() + "\r\n" + "Your OTP Generated Successfully"
	                + "\r\n" + "OTP is " + otp;

	        MailSend.mailOtp(provider.getEmail(), "Otp Sent Successfully...", body); 
	       
	       
	        session = sf.openSession();
	        Transaction trans2 = session.beginTransaction();

	        Login login = new Login();
	        login.setProviderid(provider.getProviderid()); 
	        login.setUsername(provider.getUserName());
	        login.setStatus(provider.getStatus());
	        login.setOtp(otp);
	        login.setEmail(provider.getEmail());

	        session.save(login);

	        trans2.commit();
	        session.close();

	        return "Welcome.jsp?faces-redirect=true";
	    }

//	    public static String generateOtp(int length) {
//	        String characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
//	        SecureRandom secureRandom = new SecureRandom();
//	        StringBuilder otp = new StringBuilder(length);
	//
//	        for (int i = 0; i < length; i++) {
//	            int randomIndex = secureRandom.nextInt(characters.length());
//	            char randomChar = characters.charAt(randomIndex);
//	            otp.append(randomChar);
//	        }
	//
//	        return otp.toString();
//	    }
	    public static String generateOtp(int length) {
	        String characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	        SecureRandom secureRandom = new SecureRandom();
	        StringBuilder otp = new StringBuilder(6);

	        for (int i = 0; i < 6; i++) {
	            int randomIndex = secureRandom.nextInt(characters.length());
	            char randomChar = characters.charAt(randomIndex);
	            otp.append(randomChar);
	        }

	        return otp.toString();
	    }

	//
//	    private static int provideridCounter = 1;
	//
//	    private static String generateproviderID() {
//	        // Generate providerID in the format "IN0001", "IN0002", and so on
//	        String providerid = String.format("IN%04d", provideridCounter);
//	        provideridCounter++;
//	        return providerid;
//	    }
	    
	    private static String generateproviderID() {
	        SessionFactory sf;
	        Session session;
	        sf = SessionHelper.getConnection();
	        session = sf.openSession();
	        Transaction trans = session.beginTransaction();

	        // Fetch the last providerID from the table
	        Query query = session.createQuery("SELECT MAX(p.providerid) FROM Provider p");
	        String lastProviderID = (String) query.uniqueResult();

	        if (lastProviderID == null) {
	            lastProviderID = "PROV000"; // Set an initial value if the table is empty
	        }

	        // Extract the numeric part and increment it
	        int numericPart = Integer.parseInt(lastProviderID.substring(4));
	        

	        // Generate the new providerID with the incremented numeric part
	        String newProviderID = String.format("PROV%03d", numericPart);
	        numericPart++;
	        System.out.println(newProviderID);

	        trans.commit();
	        session.close();

	        return newProviderID;
	    }

	}

	     
	     
	     


	


